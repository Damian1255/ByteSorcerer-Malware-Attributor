import os
import src.functions as functions
import src.static.static as static_analysis
import src.binlex.binlex as binlex_analysis
from flask import Flask, render_template, request, jsonify

# Initialize Flask app
app = Flask(__name__, static_url_path='/static')
app.config.from_pyfile(os.path.join(".", "config/app.conf"), silent=False)


# Route for home page
@app.route('/')
def home():
    return render_template('index.html')


# Route for static analysis model
@app.route('/staticmodel', methods=['GET', 'POST'])
def static_model():
    if request.method == 'POST':

        # Process the file from the request
        upload = functions.process_file_from_request(request)
        if not upload['valid']:
            return jsonify({'success': False, 'message': upload['message']})
        
        try:

            # Get type of model and analyze the file using the static analysis model
            model_type = request.form.get('model_type')
            results = static_analysis.analyze(upload['filename'], model_type)

            return jsonify({'success': True, 'results': results, 'method': 'static'})
        
        except Exception as e: 

            functions.clear_upload_if_exists(os.path.join(app.config['UPLOAD_FOLDER'], upload['filename']))
            message = 'We are unable to process the file, try a different file.'
            
            return jsonify({'success': False, 'message': message})
        
    return render_template('index.html')


# Route for binlex analysis model
@app.route('/comparetraits', methods=['GET', 'POST'])
def compare_traits():
    if request.method == 'POST':
        
        # Process the file from the request
        upload = functions.process_file_from_request(request)
        if not upload['valid']:
            return jsonify({'success': False, 'message': upload['message']})
        
        try:
            
            # Get the method type and analyze the file using the binlex analysis
            method = request.form.get('method_type')
            results = binlex_analysis.analyze(upload['filename'], method_type=method)
            
            return jsonify({'success': True, 'results': results, 'method': 'traits'})
        
        except Exception as e:

            functions.clear_upload_if_exists(os.path.join(app.config['UPLOAD_FOLDER'], upload['filename']))
            message = 'We are unable to process the file, try a different file.'

            return jsonify({'success': False, 'message': message})
        
    return render_template('index.html')


# Route for cfg analysis model
@app.route('/cfgmodel', methods=['GET', 'POST'])
def cfg_model():
    if request.method == 'POST':
        message = 'This analysis method is not implemented yet.'
        return jsonify({'success': False, 'message': message})


# Error handling for file size
@app.errorhandler(413)
def request_entity_too_large(error):
    message = 'The file uploaded has exceeded the maximum allowed size of 100MB.'
    return jsonify({'success': False, 'message': message})
        

# Run the app
if __name__ == '__main__' and functions.startup_integrity_check():
    app.run(debug=True)