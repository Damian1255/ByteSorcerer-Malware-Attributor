import os
from flask import Flask, render_template, request, jsonify
from werkzeug.utils import secure_filename
import src.static.static as static_analysis
import src.binlex.binlex as binlex_analysis
import src.functions as functions

# Initialize Flask app
app = Flask(__name__, static_url_path='/static')
app.config.from_pyfile(os.path.join(".", "config/app.conf"), silent=False)


# Home route
@app.route('/')
def home():
    return render_template('index.html')


@app.route('/staticmodel', methods=['GET', 'POST'])
def static_model():
    if request.method == 'POST':
        # Process the file from the request
        upload = functions.process_file_from_request(request)
        if not upload['valid']:
            return jsonify({'success': False, 'message': upload['message']})
        
        try:
            # get model_type of model to use
            model_type = request.form.get('model_type')

            # Get the file path from the upload
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], upload['filename'])

            # Process the file to extract features
            features = static_analysis.extract_features(file_path)

            # Preprocess the features
            features = static_analysis.preprocess_data(features, model_type)

            # Predict the class of the file
            results = static_analysis.predict(features, model_type)

            # Add in the file name and method used
            results['file'] = upload['filename']
            results['method'] = f'Static Analysis ({model_type.title()})'
        
            return jsonify({'success': True, 'results': results, 'method': 'static'})
        
        except Exception as e:
            functions.clear_upload_if_exists(file_path)
            message = 'We are unable to process the file, try a different file.'
            return jsonify({'success': False, 'message': message})
        
    return render_template('index.html')


@app.route('/comparetraits', methods=['GET', 'POST'])
def compare_traits():
    if request.method == 'POST':
        
        # Process the file from the request
        upload = functions.process_file_from_request(request)
        if not upload['valid']:
            return jsonify(upload)
        
        try:
            # get method_type of model to use
            method_type = request.form.get('method_type')

            # Get the file path from the upload
            file_path = os.path.join(app.config['UPLOAD_FOLDER'], upload['filename'])
            
            # Process the file to extract features
            traits = binlex_analysis.extract_traits(file_path)

            # Predict the class of the file
            results = binlex_analysis.analyze_traits(traits, method=method_type)

            # Add in the file name and method used
            results['file'] = upload['filename']
            results['method'] = f'Binlex Traits Analysis ({method_type.title()})'
            
            return jsonify({'success': True, 'results': results, 'method': 'traits'})
        
        except Exception as e:
            functions.clear_upload_if_exists(file_path)
            message = 'We are unable to process the file, try a different file.'
            return jsonify({'success': False, 'message': message})
        
    return render_template('index.html')


@app.route('/cfgmodel', methods=['GET', 'POST'])
def cfg_model():
    if request.method == 'POST':
        message = 'This analysis method is not implemented yet.'
        return jsonify({'success': False, 'message': message})


# Error handling for file size
@app.errorhandler(413)
def request_entity_too_large(error):
    message = 'The file uploaded has exceeded the maximum allowed size of 100MB.'
    return jsonify({'success': False, 'message': message})
        

if __name__ == '__main__':
    # Clear the upload folder
    for file in os.listdir(app.config['UPLOAD_FOLDER']):
        os.remove(os.path.join(app.config['UPLOAD_FOLDER'], file))

    # Run the app
    app.run(debug=True)
