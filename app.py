import os
from flask import Flask, render_template, redirect, url_for, session, request, jsonify
from werkzeug.utils import secure_filename
import src.predictor as predictor
import src.extractor as extractor

UPLOAD_FOLDER = 'uploads'
BLACKLISTED_EXTENSION = set(['php', 'js', 'html', 'htm', 'css', 'sh', 'bat', 'py', 'java', 'jar',
                             'jsp', 'jspx', 'asp', 'aspx', 'ascx', 'jspf', 'jspx', 'phpt', 'ini',
                             'log', 'sql', 'dat', 'conf', 'bak', 'inc', 'old', 'orig', 'copy', 'zip',
                             'tar', 'tar.gz', 'tar.bz2', 'bak', 'txt', 'md', 'markdown', 'yml', 'xml',
                             'json', 'csv', 'ini', 'sh', 'bash', 'docx', 'pptx', 'xlsx', 'pdf', 'doc'])

# Initialize Flask app
app = Flask(__name__, static_url_path='/static')
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['MAX_CONTENT_LENGTH'] = 100 * 1024 * 1024  # 100MB

# Home route
@app.route('/')
def home():
    return render_template('index.html')

@app.route('/staticmodel', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        # save the file to the upload folder
        for item in request.files.getlist('file'):
            if item:
                imagename = secure_filename(item.filename)

                # check if the file is blacklisted
                if '.' in imagename and imagename.rsplit('.', 1)[1].lower() in BLACKLISTED_EXTENSION:
                    return jsonify({'success': False, 'message': 'The file uploaded is not supported. Ensure you are uploading an Portable Executable file.'})
                
                # check if its within the allowed file size
                if not item:
                    return jsonify({'success': False, 'message': 'No file uploaded.'})
                
                # save the file for processing
                item.save(os.path.join(app.config['UPLOAD_FOLDER'], imagename))
            else:
                return jsonify({'success': False, 'message': 'No file uploaded.'})
            
        try:
            # process the file to extract features
            features = extractor.extract_features(os.path.join(app.config['UPLOAD_FOLDER'], imagename))

            # delete the file
            os.remove(os.path.join(app.config['UPLOAD_FOLDER'], imagename))

            # preprocess the features
            features = predictor.preprocess_data(features)

            # predict the class of the file
            results = predictor.predict(features)

            return jsonify({'success': True, 'results': results})
        except Exception as e:
            return jsonify({'success': False, 'message': 'We are unable to process the file, try a different file.'})
        
    return render_template('index.html')


# Error handling for file size
@app.errorhandler(413)
def request_entity_too_large(error):
    return jsonify({'success': False, 'message': 'The file uploaded has exceeded the maximum allowed size of 100MB.'})


if __name__ == '__main__':
    app.run(debug=True)

