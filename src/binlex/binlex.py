"""

This module contains the functions to extract traits using binlex and
analyze the traits to predict the class of a Portable Executable file.

"""


import pandas as pd
import src.binlex.pybinlex as pybinlex

BINARY_MODE_32 = pybinlex.BINARY_MODE.BINARY_MODE_32
BINARY_MODE_64 = pybinlex.BINARY_MODE.BINARY_MODE_64
BINARY_ARCH_X86 = pybinlex.BINARY_ARCH.BINARY_ARCH_X86

def extract_traits(path):
    """
    Extract traits from a Portable Executable file using binlex.

    Parameters:
    - path (str): Path to the Portable Executable file.

    """

    # Load the target PE file
    pe = pybinlex.PE()
    pe.set_architecture(BINARY_ARCH_X86, BINARY_MODE_32)
    result = pe.read_file(path)

    # Check if the PE file was read successfully
    if result is False: return None

    # Disassemble the PE file
    disassembler = pybinlex.Disassembler(pe)
    disassembler.disassemble()

    # Get the disassembled code traits
    sample_traits = disassembler.get_traits()
    
    # Check if the sample traits are empty, if so throw an error
    if not sample_traits:
        raise Exception("The sample traits are empty. Please try a different file.")
    
    return sample_traits


def analyze_traits(sample_traits, n=100):
    """

    Analyze the traits to possibly identify the class of the Portable Executable file.
    Process involves finding the top n common traits in the sample and comparing them
    with the top n traits in the dataset to find the common traits.

    Parameters:
    - sample_traits (dict): Traits extracted from the Portable Executable file.
    - n (int): Number of top traits to consider.
    
    """

    # Find the top n common traits in the sample
    sample_traits = pd.DataFrame(sample_traits, columns=['trait', 'family'])
    sample_traits = sample_traits['trait'].value_counts().head(n)
    sample_traits = pd.DataFrame(sample_traits)
    sample_traits.columns = ['count']
    sample_traits['trait'] = sample_traits.index
    sample_traits = sample_traits.reset_index(drop=True)
    sample_traits = sample_traits[['trait', 'count']]

    # Load the top n traits
    top_n_traits = pd.read_csv('./src/binlex/top_n_traits.csv')

    # Find the common traits in the sample
    results = {}
    for family in top_n_traits['family'].unique():
        c = 0
        for x in sample_traits['trait']:
            if x in top_n_traits[top_n_traits['family'] == family]['trait'].tolist():
                c += 1

        results[family] = c

    # Sort the results by count
    results = pd.DataFrame(results.items(), columns=['family', 'count'])
    results = results.sort_values(by='count', ascending=False)
    results = results.reset_index(drop=True).head(5)

    # Convert the results to a dictionary
    results = results.to_dict(orient='records')

    return {'prediction': results, 'confidence': 100}