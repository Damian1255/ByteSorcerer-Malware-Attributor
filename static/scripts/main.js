var upload_form = document.getElementById("upload-form");
var file_uploader = document.getElementById("file-uploader");
var loader = document.getElementById("loader");
var fader = document.getElementById("fader");
var init = document.getElementById("init");
var msg_error = document.getElementById("error-msg");
var error_board = document.getElementById("error");
var result_board = document.getElementById("results-div");
var path = '/staticmodel';


// Check if there is a file selected then enable the submit button
file_uploader.addEventListener("change", function () {
    if (file_uploader.files.length > 0) {
        submit_btn.disabled = false;
    } else {
        submit_btn.disabled = true;
    }
});


// Form event listener to handle the form submission
upload_form.addEventListener("submit", function (event) {
    event.preventDefault();
    
    // Display the loader and disable the submit button
    showLoader(true);
    submit_btn.disabled = true;
    init.style.display = "none";
    error_board.style.display = "none";
    result_board.style.display = "none";

    // Send the form data to the server
    const formData = new FormData(upload_form);
    const xhr = new XMLHttpRequest();
    xhr.open('POST', path, true);
    
    xhr.onload = function () {
        upload_form.reset();

        // Check if the request was successful
        if (xhr.status === 200) {
            var response = JSON.parse(xhr.responseText);

            // Check if the server responsed with a success message
            if (response.success) {
                showLoader(false);
                result_board.style.display = "block";
                update_display(response);

            } else {
                showLoader(false);
                error_board.style.display = "block";
                msg_error.innerHTML = response.message;
            }

        } else {

            // Display an error message if the request was not successful
            alert('An Internal error occurred. Please try again later.');
            showLoader(false);
            init.style.display = "block";
            error_board.style.display = "none";
        }
    };

    // Send the form data to the server
    xhr.send(formData);
});


// Function to update the display
function update_display(response) {
    console.log(response);
    var result_div = document.getElementById("result");

    if (response.method == 'static') {
        var confidence = response.results.confidence;
        var keyword = ''
        if (confidence < 40) {
            message = "We are not confident enough to make a prediction on the sample you uploaded.";
            result_div.innerHTML = message;
            return;
        }
        if (confidence > 95) {
            keyword = "highly likely";
        } else if (confidence > 70) {
            keyword = "likely";
        } else {
            keyword = "possibly";
        }

        result_div.innerHTML = "The uploaded sample is <b>" + keyword +
                        "</b> from the family of <b>" + response.results.prediction + "</b>." + 
                        "<ul><li>Model predicted with <b>" + confidence + "%</b> confidence.</li></ul>";
                        
    } else if (response.method == 'traits') {
        result_div.innerHTML = "The uploaded sample has highest common traits with <b>"
                            + response.results.prediction[0].family + "</b> family of malwares.";

        list = ''
        for (var i = 0; i < response.results.prediction.length; i++) {
            family = response.results.prediction[i].family
            count = response.results.prediction[i].count
            list += '<li><b>' + count + '</b> traits common with <b>' + family + '</b></li>'
        }
        result_div.innerHTML += '<ul>' + list + '</ul>'
    }
}


// Function to reset the display
function showLoader(show) {
    if (show) {
        loader.style.display = "block";
        fader.style.opacity = 0;
    } else {
        loader.style.display = "none";
        fader.style.opacity = 1;
    }
}


// Function to handle the toggle switch
let toggleSwitch = document.getElementsByClassName('redButton')[0]
function option1(e) {
    toggleSwitch.classList.add('horizTranslate1');
    toggleSwitch.classList.remove('horizTranslate2');
    toggleSwitch.classList.remove('horizTranslate3');
    path = '/staticmodel';
    resetColor();
    e.style.color = 'white';
}

function option2(e) {
    toggleSwitch.classList.add('horizTranslate2');
    toggleSwitch.classList.remove('horizTranslate3');
    toggleSwitch.classList.remove('horizTranslate1');
    path = '/cgfmodel';
    resetColor();
    e.style.color = 'white';
}

function option3(e) {
    toggleSwitch.classList.add('horizTranslate3');
    toggleSwitch.classList.remove('horizTranslate2');
    toggleSwitch.classList.remove('horizTranslate1');
    path = '/binlexmodel';
    resetColor();
    e.style.color = 'white';
}

function resetColor() {
    let options = document.getElementsByClassName('legendText');
    for (let i = 0; i < options.length; i++) {
        options[i].style.color = 'black';
    }
}